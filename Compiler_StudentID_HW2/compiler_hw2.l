/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */
#include <stdio.h>
#include <string.h>

#define BUF_SIZE 1024
#define LB '('
#define RB ')'
#define LCB '{'
#define RCB '}'

extern YYSTYPE yylval; //YYSTYPE
extern int scope;
extern void dump_symbol(int, int);
char buf[BUF_SIZE];

/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }

int end_of_scope = 0;

%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
"+"     { CONCAT return '+'; }
"-" 	{ CONCAT return '-'; }
"*" 	{ CONCAT return '*'; }
"/" 	{ CONCAT return '/'; }
"%"     { CONCAT return '%'; }
"++"    { CONCAT return INC; }
"--"    { CONCAT return DEC; }

 /* Relational */
">"		{ CONCAT return MT; }
"<"		{ CONCAT return LT; }
">="	{ CONCAT return MTE; }
"<="	{ CONCAT return LTE; }
"=="	{ CONCAT return EQ; }
"!="	{ CONCAT return NE; }

 /* Assignment */
"="		{ CONCAT return '='; }
"+="	{ CONCAT return ADDASGN; }
"-="	{ CONCAT return SUBASGN; }
"*="	{ CONCAT return MULASGN; }
"/="	{ CONCAT return DIVASGN; }
"%="	{ CONCAT return MODASGN; }

 /* Logical */
"&&"	{ CONCAT return AND; }
"||"	{ CONCAT return OR; }
"!"		{ CONCAT return NOT; }

 /* Delimiters */
"("		{ CONCAT return LB; } // LB = '('
")"		{ CONCAT return RB; } // RB = ')'
"{"		{ CONCAT ++scope; return LCB; } // LCB = '{'
"}"		{ CONCAT --scope; end_of_scope = 1; return RCB; } // RCB = '}'
"["		{ CONCAT return '['; }
"]"		{ CONCAT return ']'; }
","		{ CONCAT return ','; }

 /* Print Keywords */	
"print"		{ CONCAT return PRINT; }

 /* Condition and Loop Keywords */
"if"		{ CONCAT return IF; }
"else"		{ CONCAT return ELSE; }
"for"		{ CONCAT return FOR; }
"while"		{ CONCAT return WHILE; }

 /* Declaration Keywords */
"void"		{ CONCAT return VOID; }
"int"		{ CONCAT return INT; }
"float"  	{ CONCAT return FLOAT; }
"string"  	{ CONCAT return STRING; }
"bool"  	{ CONCAT return BOOL; }

 /* boolean Keywords */
"true"      { CONCAT return TRUE; }
"false"     { CONCAT return FALSE; }

"return"    { CONCAT return RET; }

 /* String Constant */
\"				        { CONCAT BEGIN STRING_STATE; }
<STRING_STATE>\"		{ CONCAT BEGIN INITIAL; }
<STRING_STATE>[^"]*		{ CONCAT return STRING_CONST; }

 /* Number Constant */
{integer}	{ CONCAT return I_CONST; }
{float}	    { CONCAT return F_CONST; }

 /* C type Comment */
"/*"				{ CONCAT BEGIN COMMENT; }
<COMMENT>[^*\n]+	{ CONCAT }
<COMMENT>\n			{ printf("%d: %s\n", yylineno, buf); memset(buf, 0, BUF_SIZE); }
<COMMENT>"*"		{ CONCAT }
<COMMENT>"*/"		{ CONCAT BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{ CONCAT }

 /* Variable ID */
 {id}       { CONCAT return ID; }

 /* others */

[;]         { CONCAT return SEMICOLON; }
[\n]       {
        printf("%d: %s\n", yylineno, buf);
        memset(buf, 0, BUF_SIZE);
        if(end_of_scope == 1) {
            dump_symbol(scope+1, 0);
            end_of_scope = 0;
        }
    }
[ \t]		{ CONCAT } /* Ignore */
[^ \t\n] 	{ CONCAT } /* Ignore other charactor sets */

%%

int yywrap()
{
    return 1;
}

/*
int main(int argc,char *argv[])
{
    printf("in scanner\n");
	yyin = fopen(argv[1],"r");
    yylex();


    printf("\nafter yylex\n\n");

	return 0;
}
*/

